name: Development Build and Push

on:
  push:
    branches:
      - develop
      - release/**
      - hotfix/**
      - dev/**
      - feature/**
      - issue/**
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get build identification data
        id: get-build-data
        run: |
          export SHA=$(git rev-parse --short HEAD)
          export BRANCH=$(basename $GITHUB_REF)
          echo "NAME=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT
          echo "SHA=$SHA" >> $GITHUB_OUTPUT
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "REPOSITORY=zingtree" >> $GITHUB_OUTPUT
          echo "RELEASE_STRING=$BRANCH - $SHA (built $(date))"

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.get-build-data.outputs.REPOSITORY }}/${{ steps.get-build-data.outputs.NAME }}:${{ steps.get-build-data.outputs.SHA }},${{ steps.get-build-data.outputs.REPOSITORY }}/${{ steps.get-build-data.outputs.NAME }}:${{ steps.get-build-data.outputs.BRANCH }}
          build-args: release_string=${{ steps.get-build-data.outputs.RELEASE_STRING }}
          platforms: linux/amd64,linux/arm64

      - name: Slack Notify Build
        id: slack-notify-build
        run: |
          curl -s -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"Completed build of ${{ steps.get-build-data.outputs.NAME }}/${{ steps.get-build-data.outputs.BRANCH }} (${{ steps.get-build-data.outputs.SHA }}).\"}" \
          ${{ secrets.SLACK_WEBHOOK }}
